// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(FInvoiceDBContext))]
    partial class FInvoiceDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Account", b =>
                {
                    b.Property<string>("IdAccount")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AccountCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ColorAvatar")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DefaultAvatar")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("char(1)");

                    b.Property<int>("LoginAttemps")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LoginTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtpCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("OtpCodeTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdAccount");

                    b.HasIndex("UserRole");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DAL.Entities.AccountingSoftware", b =>
                {
                    b.Property<string>("IdAccountingSoftware")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AccountingSoftwareCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ColorLogo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultLogo")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IdAccountingSoftware");

                    b.ToTable("AccountingSoftwares");
                });

            modelBuilder.Entity("DAL.Entities.Buyer", b =>
                {
                    b.Property<string>("IdBuyer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountBanking")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BankingName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Companyname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("IdBuyer");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("DAL.Entities.ExcelForm", b =>
                {
                    b.Property<string>("IdExcelForm")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdAccountingSoftware")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Source")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdExcelForm");

                    b.HasIndex("IdAccountingSoftware");

                    b.ToTable("ExcelForms");
                });

            modelBuilder.Entity("DAL.Entities.ExcelResult", b =>
                {
                    b.Property<string>("IdExcelResult")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExportedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("IdAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdExcelForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Source")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdExcelResult");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdExcelForm");

                    b.ToTable("ExcelResults");
                });

            modelBuilder.Entity("DAL.Entities.Invoice", b =>
                {
                    b.Property<string>("IdInvoice")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("IdAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdInvoiceForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ImportedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("Source")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal");

                    b.Property<double>("TaxtRate")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPayment")
                        .HasColumnType("decimal");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal");

                    b.HasKey("IdInvoice");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdInvoiceForm");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("DAL.Entities.InvoiceForm", b =>
                {
                    b.Property<string>("IdInvoiceForm")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodeForm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameInvoiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("IdInvoiceForm");

                    b.ToTable("InvoiceForms");
                });

            modelBuilder.Entity("DAL.Entities.Item", b =>
                {
                    b.Property<string>("IdItem")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal");

                    b.Property<string>("IdInvoice")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal");

                    b.HasKey("IdItem");

                    b.HasIndex("IdInvoice");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DAL.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Property<string>("IdRole")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdRole");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            IdRole = "o4kINXogbG",
                            Name = "Admin"
                        },
                        new
                        {
                            IdRole = "L5uojNlToi",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Seller", b =>
                {
                    b.Property<string>("IdSeller")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountBanking")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BankingName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("IdSeller");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("DAL.Entities.SuppliedInvoiceForm", b =>
                {
                    b.Property<string>("IdSuppliedInvoiceForm")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdInvoiceForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdSupplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Source")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdSuppliedInvoiceForm");

                    b.HasIndex("IdInvoiceForm");

                    b.HasIndex("IdSupplier");

                    b.ToTable("SuppliedInvoiceForms");
                });

            modelBuilder.Entity("DAL.Entities.Supplier", b =>
                {
                    b.Property<string>("IdSupplier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorLogo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DefaultLogo")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SupplierCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("IdSupplier");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("DAL.Entities.Account", b =>
                {
                    b.HasOne("DAL.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("UserRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Entities.Buyer", b =>
                {
                    b.HasOne("DAL.Entities.Invoice", "Invoice")
                        .WithMany("Buyers")
                        .HasForeignKey("IdBuyer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DAL.Entities.ExcelForm", b =>
                {
                    b.HasOne("DAL.Entities.AccountingSoftware", "AccountingSoftware")
                        .WithMany("ExcelForms")
                        .HasForeignKey("IdAccountingSoftware")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountingSoftware");
                });

            modelBuilder.Entity("DAL.Entities.ExcelResult", b =>
                {
                    b.HasOne("DAL.Entities.Account", "Account")
                        .WithMany("ExcelResults")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.ExcelForm", "ExcelForm")
                        .WithMany("ExcelResults")
                        .HasForeignKey("IdExcelForm")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ExcelForm");
                });

            modelBuilder.Entity("DAL.Entities.Invoice", b =>
                {
                    b.HasOne("DAL.Entities.Account", "Account")
                        .WithMany("Invoices")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.InvoiceForm", "InvoiceForm")
                        .WithMany("Invoices")
                        .HasForeignKey("IdInvoiceForm")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("InvoiceForm");
                });

            modelBuilder.Entity("DAL.Entities.Item", b =>
                {
                    b.HasOne("DAL.Entities.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("IdInvoice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DAL.Entities.RefreshToken", b =>
                {
                    b.HasOne("DAL.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DAL.Entities.Seller", b =>
                {
                    b.HasOne("DAL.Entities.Invoice", "Invoice")
                        .WithMany("Sellers")
                        .HasForeignKey("IdSeller")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DAL.Entities.SuppliedInvoiceForm", b =>
                {
                    b.HasOne("DAL.Entities.InvoiceForm", "InvoiceForm")
                        .WithMany("SuppliedInvoiceForm")
                        .HasForeignKey("IdInvoiceForm")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Supplier", "Supplier")
                        .WithMany("SuppliedInvoiceForms")
                        .HasForeignKey("IdSupplier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceForm");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DAL.Entities.Account", b =>
                {
                    b.Navigation("ExcelResults");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("DAL.Entities.AccountingSoftware", b =>
                {
                    b.Navigation("ExcelForms");
                });

            modelBuilder.Entity("DAL.Entities.ExcelForm", b =>
                {
                    b.Navigation("ExcelResults");
                });

            modelBuilder.Entity("DAL.Entities.Invoice", b =>
                {
                    b.Navigation("Buyers");

                    b.Navigation("Items");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("DAL.Entities.InvoiceForm", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("SuppliedInvoiceForm");
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("DAL.Entities.Supplier", b =>
                {
                    b.Navigation("SuppliedInvoiceForms");
                });
#pragma warning restore 612, 618
        }
    }
}
